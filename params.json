{"name":"Android Snippets","tagline":"Snippets for Android developers","body":"![Logo](http://blog.valtech.fr/wp-content/uploads/android_studio_logo-300x300.png)\r\n\r\n  * [ADB](#adb-android-debug-bridge)\r\n    * [list of devices](#list-of-devices)\r\n    * [screen capture](#screen-capture)\r\n    * [screen record](#screen-record)\r\n    * [run monkey](#run-monkey)\r\n    * [sqlite](#sqlite)\r\n    * [handy commands](#handy-commands)\r\n  * [Animation](#animation)\r\n    * [flash](#flash)\r\n    * [nope](#nope)\r\n    * [pulse](#pulse)\r\n    * [spring](#spring)\r\n    * [tada](#tada)\r\n  * [Application](#application)\r\n    * [application name](#applicatio-nname)\r\n    * [version name](#version-name)\r\n    * [version code](#version-code)\r\n    * [kill background processes](#kill-background-processes)\r\n    * [restart](#restart)\r\n  * [Build](#build)\r\n    * [OS version](#os-version)\r\n    * [has Cupcake](#has-cupcake)\r\n    * [has Donut](#has-donut)\r\n    * [has Eclair](#has-eclair)\r\n    * [has Froyo](#has-froyo)\r\n    * [has Gingerbread](#has-gingerbread)\r\n    * [has Honeycomb](#has-honeycomb)\r\n    * [has Ice Cream Sandwich](#has-ice-cream-sandwich)\r\n    * [has Jelly Bean](#has-jelly-bean)\r\n    * [has KitKat](#has-kitkat)\r\n\r\n\r\nADB (Android Debug Bridge)\r\n--------------------------\r\n\r\n### list of devices\r\n\r\n```bash\r\n#!/bin/bash\r\nif [[ ! $PATH_TO_ADB ]]; then\r\n\tPATH_TO_ADB=`which adb`\r\nfi\r\n\r\nif [[ ! $PATH_TO_ADB ]]; then\r\n\tif [[ ! $ANDROID_HOME ]]; then\r\n\t\techo \"Failed to determine path to adb; consider setting ANDROID_HOME to your SDK directory or PATH_TO_ADB to the path to ADB\"\r\n\t\texit 1\r\n\tfi\r\n\tPATH_TO_ADB=\"$ANDROID_HOME/platform-tools/adb\"\r\nfi\r\n\r\ndevices=`$PATH_TO_ADB devices | grep -E \"device\\$\" | cut -f1`\r\n\r\nfor device in $devices; do\r\n\tmodel=$($PATH_TO_ADB -s $device shell getprop ro.product.model | tr -d '\\r')\r\n\tversion=$($PATH_TO_ADB -s $device shell getprop ro.build.version.release | tr -d '\\r')\r\n\tsdk=$($PATH_TO_ADB -s $device shell getprop ro.build.version.sdk | tr -d '\\r')\r\n\r\n\tprintf '%-20s [%5s ~ %2s]: %-20s \\n' \"$device\" \"$version\" \"$sdk\" \"$model\"\r\ndone\r\n```\r\n\r\n### screen capture\r\n\r\n```bash\r\nname=\"/sdcard/`date +%Y.%m.%d\\ -\\ %H.%M.%S`.png\" && \\\r\n\tadb shell screencap -p $name && \\\r\n\tadb pull $name && \\\r\n\tadb shell rm $name\r\n```\r\n\r\n### screen record\r\n\r\n * **bit rate**  `--bit-rate <rate>`\r\n * **size**  `--size <widthXheight>`\r\n * **time limit**  `--time-limit <time>`\r\n\r\n```bash\r\nname=\"/sdcard/`date +%Y.%m.%d\\ -\\ %H.%M.%S`.mp4\" && \\\r\n\tadb shell screenrecord --bit-rate 20000000 --time-limit 30 $name && \\\r\n\tadb pull $name && \\\r\n\tadb shell rm $name\r\n```\r\n\r\n### run monkey\r\n\r\n * **verbose**  `-v`\r\n * **package name**  `-p <your.package.name>`\r\n * **throttling**  `--throttle <milliseconds>`\r\n\r\n```bash\r\nadb shell monkey -p your.package.name -v 500\r\n```\r\n\r\n### sqlite\r\n\r\n```bash\r\nadb shell\r\n$ sqlite3 /data/data/your.package.name/databases/your-database.db\r\n\tSQLite version 3.3.12\r\n\tEnter \".help\" for instructions\r\n\t.... enter commands, then quit...\r\nsqlite> .exit \r\n```\r\n\r\n### handy commands \r\n\r\n```bash\r\n# install apk\r\nadb install -r app.apk\r\n\r\n# uninstall apk\r\nadb uninstall your.package.name\r\n\r\n# start activity\r\nadb shell am start -n your.package.name/.YourActivity\r\n\r\n# start scheme intent\r\nadb shell am start -W -a android.intent.action.VIEW -d \"yourscheme://something\" your.package.name\r\n\r\n# installed packages\r\nadb shell pm list packages -f\r\n\r\n# enable CheckJNI (0 to disable)\r\nadb shell setprop debug.checkjni 1\r\n```\r\n\r\n\r\nAnimation\r\n---------\r\n\r\n### flash\r\n\r\n```java\r\npublic static ObjectAnimator flash(View view, float alphaFactor) {\r\n\tPropertyValuesHolder pvhalpha = PropertyValuesHolder.ofKeyframe(android.view.View.ALPHA, Keyframe.ofFloat(0f, 1f), Keyframe.ofFloat(.25f, alphaFactor), Keyframe.ofFloat(0.5f, 1f), Keyframe.ofFloat(.75f, alphaFactor), Keyframe.ofFloat(1f, 1f));\r\n\treturn ObjectAnimator.ofPropertyValuesHolder(view, pvhalpha).setDuration(800);\r\n}\r\n```\r\n\r\n### nope\r\n\r\nIntroduced by @cyrilmottier on [Google+](https://plus.google.com/+CyrilMottier/posts/FABaJhRMCuy)\r\n\r\n```java\r\npublic static ObjectAnimator nope(View view, int delta) {\r\n    PropertyValuesHolder pvhTranslateX = PropertyValuesHolder.ofKeyframe(View.TRANSLATION_X, Keyframe.ofFloat(0f, 0),\r\n            Keyframe.ofFloat(.10f, -delta), Keyframe.ofFloat(.26f, delta), Keyframe.ofFloat(.42f, -delta), Keyframe.ofFloat(.58f, delta),\r\n            Keyframe.ofFloat(.74f, -delta), Keyframe.ofFloat(.90f, delta), Keyframe.ofFloat(1f, 0f));\r\n    return ObjectAnimator.ofPropertyValuesHolder(view, pvhTranslateX).setDuration(500);\r\n}\r\n```\r\n\r\n### pulse\r\n\r\n```java\r\npublic static ObjectAnimator pulse(View view, float pulseFactor) {\r\n\tPropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_X, Keyframe.ofFloat(0f, 1f), Keyframe.ofFloat(.5f, pulseFactor * 1f), Keyframe.ofFloat(1f, 1f));\r\n\tPropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_Y, Keyframe.ofFloat(0f, 1f), Keyframe.ofFloat(.5f, pulseFactor * 1f), Keyframe.ofFloat(1f, 1f));\r\n\treturn ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY).setDuration(500);\r\n}\r\n```\r\n\r\n### spring\r\n\r\n```java\r\npublic static ObjectAnimator spring(View view, float springFactor) {\r\n\tPropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_X, Keyframe.ofFloat(0f, 1f),\r\n\t\t\tKeyframe.ofFloat(0.25f, springFactor * 1.35f), Keyframe.ofFloat(0.5f, 0.65f / springFactor),\r\n\t\t\tKeyframe.ofFloat(0.75f, springFactor * 1.15f), Keyframe.ofFloat(1f, 1f));\r\n\tPropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_Y, Keyframe.ofFloat(0f, 1f),\r\n\t\t\tKeyframe.ofFloat(0.25f, 0.65f / springFactor), Keyframe.ofFloat(0.5f, springFactor * 1.35f),\r\n\t\t\tKeyframe.ofFloat(0.75f, 0.85f / springFactor), Keyframe.ofFloat(1f, 1f));\r\n\treturn ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY).setDuration(600);\r\n}\r\n```\r\n\r\n### tada\r\n\r\nIntroduced by @cyrilmottier on [Google+](https://plus.google.com/+CyrilMottier/posts/FABaJhRMCuy)\r\n\r\n```java\r\npublic static ObjectAnimator tada(View view, float shakeFactor) {\r\n    PropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(View.SCALE_X, Keyframe.ofFloat(0f, 1f),\r\n            Keyframe.ofFloat(.1f, .9f), Keyframe.ofFloat(.2f, .9f), Keyframe.ofFloat(.3f, 1.1f), Keyframe.ofFloat(.4f, 1.1f),\r\n            Keyframe.ofFloat(.5f, 1.1f), Keyframe.ofFloat(.6f, 1.1f), Keyframe.ofFloat(.7f, 1.1f), Keyframe.ofFloat(.8f, 1.1f),\r\n            Keyframe.ofFloat(.9f, 1.1f), Keyframe.ofFloat(1f, 1f));\r\n\r\n    PropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(View.SCALE_Y, Keyframe.ofFloat(0f, 1f),\r\n            Keyframe.ofFloat(.1f, .9f), Keyframe.ofFloat(.2f, .9f), Keyframe.ofFloat(.3f, 1.1f), Keyframe.ofFloat(.4f, 1.1f),\r\n            Keyframe.ofFloat(.5f, 1.1f), Keyframe.ofFloat(.6f, 1.1f), Keyframe.ofFloat(.7f, 1.1f), Keyframe.ofFloat(.8f, 1.1f),\r\n            Keyframe.ofFloat(.9f, 1.1f), Keyframe.ofFloat(1f, 1f));\r\n\r\n    PropertyValuesHolder pvhRotate = PropertyValuesHolder.ofKeyframe(View.ROTATION, Keyframe.ofFloat(0f, 0f),\r\n            Keyframe.ofFloat(.1f, -3f * shakeFactor), Keyframe.ofFloat(.2f, -3f * shakeFactor), Keyframe.ofFloat(.3f, 3f * shakeFactor),\r\n            Keyframe.ofFloat(.4f, -3f * shakeFactor), Keyframe.ofFloat(.5f, 3f * shakeFactor), Keyframe.ofFloat(.6f, -3f * shakeFactor),\r\n            Keyframe.ofFloat(.7f, 3f * shakeFactor), Keyframe.ofFloat(.8f, -3f * shakeFactor), Keyframe.ofFloat(.9f, 3f * shakeFactor),\r\n            Keyframe.ofFloat(1f, 0));\r\n\r\n    return ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY, pvhRotate).setDuration(1000);\r\n}\r\n```\r\n\r\nApplication\r\n-----------\r\n\r\n### application name\r\n\r\n```java\r\npublic static String getApplicationName(Context context) {\r\n    try {\r\n        return context.getString(context.getPackageManager().getPackageInfo(context.getPackageName(), 0).applicationInfo.labelRes);\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"Failed to get application name\", e);\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n### version name\r\n\r\n```java\r\npublic static String getVersionName(Context context) {\r\n\ttry {\r\n\t\treturn context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;\r\n\t} catch (Exception e) {\r\n\t\tLog.e(TAG, \"Failed to get application version number\", e);\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\r\n\r\n### version code\r\n\r\n```java\r\npublic static String getVersionCode(Context context) {\r\n\ttry {\r\n\t\treturn Integer.toString(context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionCode);\r\n\t} catch (Exception e) {\r\n\t\tLog.e(TAG, \"Failed to get application version code\", e);\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\r\n\r\n### kill background processes\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.KILL_BACKGROUND_PROCESSES\" />\r\n```\r\n\r\n```java\r\npublic static void killBackgroundProcesses(Context context, String packageName) {\r\n\t((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).killBackgroundProcesses(packageName);\r\n}\r\n```\r\n\r\n### restart\r\n\r\n```java\r\npublic static void restart(Activity activity) {\r\n\tIntent intent = activity.getPackageManager().getLaunchIntentForPackage(activity.getPackageName());\r\n\tintent.setData(activity.getIntent().getData());\r\n\tPendingIntent pi = PendingIntent.getActivity(activity, 1111, intent, PendingIntent.FLAG_CANCEL_CURRENT);\r\n\tAlarmManager mgr = (AlarmManager) activity.getSystemService(Context.ALARM_SERVICE);\r\n\tmgr.set(AlarmManager.RTC, System.currentTimeMillis() + 100, pi);\r\n\tandroid.os.Process.killProcess(android.os.Process.myPid());\r\n}\r\n```\r\n\r\nBuild\r\n-----\r\n\r\n### OS version\r\n\r\n```java\r\npublic static String getOsVersion() {\r\n    return android.os.Build.VERSION.RELEASE;\r\n}\r\n```\r\n\r\n### has Cupcake\r\n\r\n```java\r\npublic static boolean hasCupcake() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.CUPCAKE;\r\n}\r\n```\r\n\r\n### has Donut\r\n\r\n```java\r\npublic static boolean hasDonut() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.DONUT;\r\n}\r\n```\r\n\r\n### has Eclair\r\n\r\n```java\r\npublic static boolean hasEclair() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ECLAIR;\r\n}\r\n```\r\n\r\n### has Froyo\r\n\r\n```java\r\npublic static boolean hasFroyo() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.FROYO;\r\n}\r\n```\r\n\r\n### has Gingerbread\r\n\r\n```java\r\npublic static boolean hasGingerbread() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD;\r\n}\r\n\r\npublic static boolean hasGingerbreadMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD_MR1;\r\n}\r\n```\r\n\r\n### has Honeycomb\r\n\r\n```java\r\npublic static boolean hasHoneycomb() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB;\r\n}\r\n\r\npublic static boolean hasHoneycombMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB_MR1;\r\n}\r\n\r\npublic static boolean hasHoneycombMR2() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB_MR2;\r\n}\r\n```\r\n\r\n### has Ice Cream Sandwich\r\n\r\n```java\r\npublic static boolean hasIceCreamSandwich() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;\r\n}\r\n\r\npublic static boolean hasIceCreamSandwichMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1;\r\n}\r\n```\r\n\r\n### has Jelly Bean\r\n\r\n```java\r\npublic static boolean hasJellyBean() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN;\r\n}\r\n\r\npublic static boolean hasJellyBeanMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;\r\n}\r\n\r\npublic static boolean hasJellyBeanMR2() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;\r\n}\r\n```\r\n\r\n### has KitKat\r\n\r\n```java\r\npublic static boolean hasKitKat() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT;\r\n}\r\n```\r\n","google":"UA-26219014-2","note":"Don't delete this file! It's used internally to help with page regeneration."}