{"name":"Android Snippets","tagline":"Snippets for Android developers","body":"  * [ADB](#adb-android-debug-bridge)\r\n    * [list of devices](#list-of-devices)\r\n    * [screen capture](#screen-capture)\r\n    * [screen record](#screen-record)\r\n    * [run monkey](#run-monkey)\r\n    * [sqlite](#sqlite)\r\n    * [handy commands](#handy-commands)\r\n  * [Animation](#animation)\r\n    * [flash](#flash)\r\n    * [nope](#nope)\r\n    * [pulse](#pulse)\r\n    * [spring](#spring)\r\n    * [tada](#tada)\r\n  * [Application](#application)\r\n    * [application name](#applicatio-nname)\r\n    * [version name](#version-name)\r\n    * [version code](#version-code)\r\n    * [kill background processes](#kill-background-processes)\r\n    * [restart](#restart)\r\n  * [Build](#build)\r\n    * [OS version](#os-version)\r\n    * [has Cupcake](#has-cupcake)\r\n    * [has Donut](#has-donut)\r\n    * [has Eclair](#has-eclair)\r\n    * [has Froyo](#has-froyo)\r\n    * [has Gingerbread](#has-gingerbread)\r\n    * [has Honeycomb](#has-honeycomb)\r\n    * [has Ice Cream Sandwich](#has-ice-cream-sandwich)\r\n    * [has Jelly Bean](#has-jelly-bean)\r\n    * [has KitKat](#has-kitkat)\r\n  * [Device](#device)\r\n    * [Device name](#device-name)\r\n    * [SDK version](#sdk-version)\r\n    * [Phone number](#phone-number)\r\n    * [has Camera](#has-camera)\r\n    * [is emulator](#is-emulator)\r\n  * [InputFilter](#inputfilter)\r\n    * [All Lower](#all-lower)\r\n    * [Restricted chars](#restricted-chars)\r\n  * [Intent](#intent)\r\n    * [is Intent available](#is-intent-available)\r\n    * [browse](#browse)\r\n    * [share](#share)\r\n    * [dial](#dial)\r\n    * [call](#call)\r\n    * [sms](#sms)\r\n    * [mms](#mms)\r\n    * [email](#email)\r\n    * [maps](#maps)\r\n    * [navigation](#navigation)\r\n    * [install](#install)\r\n    * [uninstall](#uninstall)\r\n    * [playStore](#playstore)\r\n    * [select contact](#select-contact)\r\n    * [take picture](#take-picture)\r\n    * [take video](#take-video)\r\n    * [wifi settings](#wifi-settings)\r\n  * [Logcat](#logcat)\r\n    * [clear](#clear)\r\n    * [capture](#capture)\r\n  * [Network](#network)\r\n    * [is online](#is-online)\r\n    * [enable wifi](#enable-wifi)\r\n\r\n\r\nADB (Android Debug Bridge)\r\n--------------------------\r\n\r\n### list of devices\r\n\r\n```bash\r\n#!/bin/bash\r\nif [[ ! $PATH_TO_ADB ]]; then\r\n\tPATH_TO_ADB=`which adb`\r\nfi\r\n\r\nif [[ ! $PATH_TO_ADB ]]; then\r\n\tif [[ ! $ANDROID_HOME ]]; then\r\n\t\techo \"Failed to determine path to adb; consider setting ANDROID_HOME to your SDK directory or PATH_TO_ADB to the path to ADB\"\r\n\t\texit 1\r\n\tfi\r\n\tPATH_TO_ADB=\"$ANDROID_HOME/platform-tools/adb\"\r\nfi\r\n\r\ndevices=`$PATH_TO_ADB devices | grep -E \"device\\$\" | cut -f1`\r\n\r\nfor device in $devices; do\r\n\tmodel=$($PATH_TO_ADB -s $device shell getprop ro.product.model | tr -d '\\r')\r\n\tversion=$($PATH_TO_ADB -s $device shell getprop ro.build.version.release | tr -d '\\r')\r\n\tsdk=$($PATH_TO_ADB -s $device shell getprop ro.build.version.sdk | tr -d '\\r')\r\n\r\n\tprintf '%-20s [%5s ~ %2s]: %-20s \\n' \"$device\" \"$version\" \"$sdk\" \"$model\"\r\ndone\r\n```\r\n\r\n### screen capture\r\n\r\n```bash\r\nname=\"/sdcard/`date +%Y.%m.%d\\ -\\ %H.%M.%S`.png\" && \\\r\n\tadb shell screencap -p $name && \\\r\n\tadb pull $name && \\\r\n\tadb shell rm $name\r\n```\r\n\r\n### screen record\r\n\r\n * **bit rate**  `--bit-rate <rate>`\r\n * **size**  `--size <widthXheight>`\r\n * **time limit**  `--time-limit <time>`\r\n\r\n```bash\r\nname=\"/sdcard/`date +%Y.%m.%d\\ -\\ %H.%M.%S`.mp4\" && \\\r\n\tadb shell screenrecord --bit-rate 20000000 --time-limit 30 $name && \\\r\n\tadb pull $name && \\\r\n\tadb shell rm $name\r\n```\r\n\r\n### run monkey\r\n\r\n * **verbose**  `-v`\r\n * **package name**  `-p <your.package.name>`\r\n * **throttling**  `--throttle <milliseconds>`\r\n\r\n```bash\r\nadb shell monkey -p your.package.name -v 500\r\n```\r\n\r\n### sqlite\r\n\r\n```bash\r\nadb shell\r\n$ sqlite3 /data/data/your.package.name/databases/your-database.db\r\n\tSQLite version 3.3.12\r\n\tEnter \".help\" for instructions\r\n\t.... enter commands, then quit...\r\nsqlite> .exit \r\n```\r\n\r\n### handy commands \r\n\r\n```bash\r\n# install apk\r\nadb install -r app.apk\r\n\r\n# uninstall apk\r\nadb uninstall your.package.name\r\n\r\n# start activity\r\nadb shell am start -n your.package.name/.YourActivity\r\n\r\n# start scheme intent\r\nadb shell am start -W -a android.intent.action.VIEW -d \"yourscheme://something\" your.package.name\r\n\r\n# installed packages\r\nadb shell pm list packages -f\r\n\r\n# enable CheckJNI (0 to disable)\r\nadb shell setprop debug.checkjni 1\r\n\r\n# send broadcast (--es | --esn | --ez | --ei | --el | --ef | --eu | --eia | --ela | --efa)\r\nadb shell am broadcast -a your.custom.ACTION -n your.package.name/.YourBroadcastReceiver -e \"key\" \"value\"\r\n\r\n```\r\n\r\n\r\nAnimation\r\n---------\r\n\r\n### flash\r\n\r\n```java\r\npublic static ObjectAnimator flash(View view, float alphaFactor) {\r\n\tPropertyValuesHolder pvhalpha = PropertyValuesHolder.ofKeyframe(android.view.View.ALPHA, Keyframe.ofFloat(0f, 1f), Keyframe.ofFloat(.25f, alphaFactor), Keyframe.ofFloat(0.5f, 1f), Keyframe.ofFloat(.75f, alphaFactor), Keyframe.ofFloat(1f, 1f));\r\n\treturn ObjectAnimator.ofPropertyValuesHolder(view, pvhalpha).setDuration(800);\r\n}\r\n```\r\n\r\n### nope\r\n\r\nIntroduced by @cyrilmottier on [Google+](https://plus.google.com/+CyrilMottier/posts/FABaJhRMCuy)\r\n\r\n```java\r\npublic static ObjectAnimator nope(View view, int delta) {\r\n    PropertyValuesHolder pvhTranslateX = PropertyValuesHolder.ofKeyframe(View.TRANSLATION_X, Keyframe.ofFloat(0f, 0),\r\n            Keyframe.ofFloat(.10f, -delta), Keyframe.ofFloat(.26f, delta), Keyframe.ofFloat(.42f, -delta), Keyframe.ofFloat(.58f, delta),\r\n            Keyframe.ofFloat(.74f, -delta), Keyframe.ofFloat(.90f, delta), Keyframe.ofFloat(1f, 0f));\r\n    return ObjectAnimator.ofPropertyValuesHolder(view, pvhTranslateX).setDuration(500);\r\n}\r\n```\r\n\r\n### pulse\r\n\r\n```java\r\npublic static ObjectAnimator pulse(View view, float pulseFactor) {\r\n\tPropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_X, Keyframe.ofFloat(0f, 1f), Keyframe.ofFloat(.5f, pulseFactor * 1f), Keyframe.ofFloat(1f, 1f));\r\n\tPropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_Y, Keyframe.ofFloat(0f, 1f), Keyframe.ofFloat(.5f, pulseFactor * 1f), Keyframe.ofFloat(1f, 1f));\r\n\treturn ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY).setDuration(500);\r\n}\r\n```\r\n\r\n### spring\r\n\r\n```java\r\npublic static ObjectAnimator spring(View view, float springFactor) {\r\n\tPropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_X, Keyframe.ofFloat(0f, 1f),\r\n\t\t\tKeyframe.ofFloat(0.25f, springFactor * 1.35f), Keyframe.ofFloat(0.5f, 0.65f / springFactor),\r\n\t\t\tKeyframe.ofFloat(0.75f, springFactor * 1.15f), Keyframe.ofFloat(1f, 1f));\r\n\tPropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(android.view.View.SCALE_Y, Keyframe.ofFloat(0f, 1f),\r\n\t\t\tKeyframe.ofFloat(0.25f, 0.65f / springFactor), Keyframe.ofFloat(0.5f, springFactor * 1.35f),\r\n\t\t\tKeyframe.ofFloat(0.75f, 0.85f / springFactor), Keyframe.ofFloat(1f, 1f));\r\n\treturn ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY).setDuration(600);\r\n}\r\n```\r\n\r\n### tada\r\n\r\nIntroduced by @cyrilmottier on [Google+](https://plus.google.com/+CyrilMottier/posts/FABaJhRMCuy)\r\n\r\n```java\r\npublic static ObjectAnimator tada(View view, float shakeFactor) {\r\n    PropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(View.SCALE_X, Keyframe.ofFloat(0f, 1f),\r\n            Keyframe.ofFloat(.1f, .9f), Keyframe.ofFloat(.2f, .9f), Keyframe.ofFloat(.3f, 1.1f), Keyframe.ofFloat(.4f, 1.1f),\r\n            Keyframe.ofFloat(.5f, 1.1f), Keyframe.ofFloat(.6f, 1.1f), Keyframe.ofFloat(.7f, 1.1f), Keyframe.ofFloat(.8f, 1.1f),\r\n            Keyframe.ofFloat(.9f, 1.1f), Keyframe.ofFloat(1f, 1f));\r\n\r\n    PropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(View.SCALE_Y, Keyframe.ofFloat(0f, 1f),\r\n            Keyframe.ofFloat(.1f, .9f), Keyframe.ofFloat(.2f, .9f), Keyframe.ofFloat(.3f, 1.1f), Keyframe.ofFloat(.4f, 1.1f),\r\n            Keyframe.ofFloat(.5f, 1.1f), Keyframe.ofFloat(.6f, 1.1f), Keyframe.ofFloat(.7f, 1.1f), Keyframe.ofFloat(.8f, 1.1f),\r\n            Keyframe.ofFloat(.9f, 1.1f), Keyframe.ofFloat(1f, 1f));\r\n\r\n    PropertyValuesHolder pvhRotate = PropertyValuesHolder.ofKeyframe(View.ROTATION, Keyframe.ofFloat(0f, 0f),\r\n            Keyframe.ofFloat(.1f, -3f * shakeFactor), Keyframe.ofFloat(.2f, -3f * shakeFactor), Keyframe.ofFloat(.3f, 3f * shakeFactor),\r\n            Keyframe.ofFloat(.4f, -3f * shakeFactor), Keyframe.ofFloat(.5f, 3f * shakeFactor), Keyframe.ofFloat(.6f, -3f * shakeFactor),\r\n            Keyframe.ofFloat(.7f, 3f * shakeFactor), Keyframe.ofFloat(.8f, -3f * shakeFactor), Keyframe.ofFloat(.9f, 3f * shakeFactor),\r\n            Keyframe.ofFloat(1f, 0));\r\n\r\n    return ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY, pvhRotate).setDuration(1000);\r\n}\r\n```\r\n\r\nApplication\r\n-----------\r\n\r\n### application name\r\n\r\n```java\r\npublic static String getApplicationName(Context context) {\r\n    try {\r\n        return context.getString(context.getPackageManager().getPackageInfo(context.getPackageName(), 0).applicationInfo.labelRes);\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"Failed to get application name\", e);\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n### version name\r\n\r\n```java\r\npublic static String getVersionName(Context context) {\r\n\ttry {\r\n\t\treturn context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionName;\r\n\t} catch (Exception e) {\r\n\t\tLog.e(TAG, \"Failed to get application version number\", e);\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\r\n\r\n### version code\r\n\r\n```java\r\npublic static String getVersionCode(Context context) {\r\n\ttry {\r\n\t\treturn Integer.toString(context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionCode);\r\n\t} catch (Exception e) {\r\n\t\tLog.e(TAG, \"Failed to get application version code\", e);\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\r\n\r\n### kill background processes\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.KILL_BACKGROUND_PROCESSES\" />\r\n```\r\n\r\n```java\r\npublic static void killBackgroundProcesses(Context context, String packageName) {\r\n\t((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).killBackgroundProcesses(packageName);\r\n}\r\n```\r\n\r\n### restart\r\n\r\n```java\r\npublic static void restart(Activity activity) {\r\n\tIntent intent = activity.getPackageManager().getLaunchIntentForPackage(activity.getPackageName());\r\n\tintent.setData(activity.getIntent().getData());\r\n\tPendingIntent pi = PendingIntent.getActivity(activity, 1111, intent, PendingIntent.FLAG_CANCEL_CURRENT);\r\n\tAlarmManager mgr = (AlarmManager) activity.getSystemService(Context.ALARM_SERVICE);\r\n\tmgr.set(AlarmManager.RTC, System.currentTimeMillis() + 100, pi);\r\n\tandroid.os.Process.killProcess(android.os.Process.myPid());\r\n}\r\n```\r\n\r\nBuild\r\n-----\r\n\r\n### OS version\r\n\r\n```java\r\npublic static String getOsVersion() {\r\n    return android.os.Build.VERSION.RELEASE;\r\n}\r\n```\r\n\r\n### has Cupcake\r\n\r\n```java\r\npublic static boolean hasCupcake() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.CUPCAKE;\r\n}\r\n```\r\n\r\n### has Donut\r\n\r\n```java\r\npublic static boolean hasDonut() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.DONUT;\r\n}\r\n```\r\n\r\n### has Eclair\r\n\r\n```java\r\npublic static boolean hasEclair() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ECLAIR;\r\n}\r\n```\r\n\r\n### has Froyo\r\n\r\n```java\r\npublic static boolean hasFroyo() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.FROYO;\r\n}\r\n```\r\n\r\n### has Gingerbread\r\n\r\n```java\r\npublic static boolean hasGingerbread() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD;\r\n}\r\n\r\npublic static boolean hasGingerbreadMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD_MR1;\r\n}\r\n```\r\n\r\n### has Honeycomb\r\n\r\n```java\r\npublic static boolean hasHoneycomb() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB;\r\n}\r\n\r\npublic static boolean hasHoneycombMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB_MR1;\r\n}\r\n\r\npublic static boolean hasHoneycombMR2() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB_MR2;\r\n}\r\n```\r\n\r\n### has Ice Cream Sandwich\r\n\r\n```java\r\npublic static boolean hasIceCreamSandwich() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;\r\n}\r\n\r\npublic static boolean hasIceCreamSandwichMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1;\r\n}\r\n```\r\n\r\n### has Jelly Bean\r\n\r\n```java\r\npublic static boolean hasJellyBean() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN;\r\n}\r\n\r\npublic static boolean hasJellyBeanMR1() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;\r\n}\r\n\r\npublic static boolean hasJellyBeanMR2() {\r\n\treturn android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;\r\n}\r\n```\r\n\r\n### has KitKat\r\n\r\n```java\r\npublic static boolean hasKitKat() {\r\n    return android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT;\r\n}\r\n```\r\n\r\nDevice\r\n------\r\n\r\n### Device name\r\n\r\n```java\r\npublic static String getDeviceName() {\r\n    String manufacturer = android.os.Build.MANUFACTURER;\r\n    String model = android.os.Build.MODEL;\r\n    return model.startsWith(manufacturer) ? model : manufacturer + \" \" + model;\r\n}\r\n```\r\n\r\n### SDK version\r\n\r\n```java\r\npublic static int getSdkVersion() {\r\n    try {\r\n        return android.os.Build.VERSION.class.getField(\"SDK_INT\").getInt(null);\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"Failed to get SDK version\", e);\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\n### Phone number\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n```\r\n\r\n```java\r\npublic static String getPhoneNumber(Context context) {\r\n    return ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number();\r\n}\r\n```\r\n\r\n### has Camera\r\n\r\n```java\r\npublic static boolean hasCamera(Context context) {\r\n    PackageManager pm = context.getPackageManager();\r\n    return pm.hasSystemFeature(PackageManager.FEATURE_CAMERA) || pm.hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT);\r\n}\r\n```\r\n\r\n### is emulator\r\n\r\n```java\r\npublic static boolean isEmulator() {\r\n    return android.os.Build.MODEL.equals(\"sdk\") || android.os.Build.MODEL.equals(\"google_sdk\");\r\n}\r\n```\r\n\r\nInputFilter\r\n-----------\r\n\r\n### All Lower\r\n\r\n```java\r\npublic class AllLower implements InputFilter {\r\n\t@Override\r\n\tpublic CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {\r\n\t\tfor (int i = start; i < end; i++) {\r\n\t\t\tif (Character.isUpperCase(source.charAt(i))) {\r\n\t\t\t\tchar[] v = new char[end - start];\r\n\t\t\t\tTextUtils.getChars(source, start, end, v, 0);\r\n\t\t\t\tString s = new String(v).toLowerCase();\r\n\t\t\t\tif (source instanceof Spanned) {\r\n\t\t\t\t\tSpannableString sp = new SpannableString(s);\r\n\t\t\t\t\tTextUtils.copySpansFrom((Spanned) source, start, end, null, sp, 0);\r\n\t\t\t\t\treturn sp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn s;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\r\n\r\n### Restricted chars\r\n\r\n```java\r\npublic class RestrictedChars implements android.text.InputFilter {\r\n\r\n\tprivate char[] restrictedChars;\r\n\r\n\tpublic RestrictedChars(char... acceptedChars) {\r\n\t\tthis.restrictedChars = acceptedChars;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {\r\n\t\tint i;\r\n\t\tfor (i = start; i < end; i++) {\r\n\t\t\tif (!ok(restrictedChars, source.charAt(i))) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (i == end) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (end - start == 1) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n\t\tSpannableStringBuilder filtered = new SpannableStringBuilder(source, start, end);\r\n\t\ti -= start;\r\n\t\tend -= start;\r\n\r\n\t\tfor (int j = end - 1; j >= i; j--) {\r\n\t\t\tif (!ok(restrictedChars, source.charAt(j))) {\r\n\t\t\t\tfiltered.delete(j, j + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn filtered;\r\n\t}\r\n\r\n\tprotected boolean ok(char[] accept, char c) {\r\n\t\tfor (int i = accept.length - 1; i >= 0; i--) {\r\n\t\t\tif (accept[i] == c) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n```\r\n\r\nIntent\r\n------\r\n\r\n### is Intent available\r\n\r\n```java\r\npublic static boolean isIntentAvailable(Context context, Intent intent) {\r\n    return !context.getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY).isEmpty();\r\n}\r\n```\r\n\r\n### browse\r\n\r\n```java\r\npublic static Intent browse(Context context, String url) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(url));\r\n}\r\n```\r\n\r\n### share\r\n\r\n```java\r\npublic static Intent share(Context context, String subject, String message) {\r\n    Intent intent = new Intent(Intent.ACTION_SEND);\r\n    intent.setType(\"text/plain\");\r\n    intent.putExtra(Intent.EXTRA_TEXT, message);\r\n    intent.putExtra(Intent.EXTRA_SUBJECT, subject);\r\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n    return intent;\r\n}\r\n```\r\n\r\n### dial\r\n\r\n```java\r\npublic static Intent dial(Context context, String number) {\r\n    return new Intent(Intent.ACTION_DIAL, Uri.parse(\"tel:\" + number));\r\n}\r\n```\r\n\r\n### call\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n```\r\n\r\n```java\r\npublic static Intent call(Context context, String number) {\r\n    return new Intent(Intent.ACTION_CALL, Uri.parse(\"tel:\" + number));\r\n}\r\n```\r\n\r\n### sms\r\n\r\n```java\r\npublic static Intent sms(Context context, String number, String message) {\r\n    Uri uri = Uri.parse(\"smsto:\" + number);\r\n    Intent intent = new Intent(Intent.ACTION_SENDTO, uri);\r\n    intent.putExtra(\"sms_body\", message);\r\n    return intent;\r\n}\r\n```\r\n\r\n### mms\r\n\r\n```java\r\npublic static Intent mms(Context context, String number, String subject, String message, Uri attachment) {\r\n    Uri uri = Uri.parse(\"mmsto:\" + number);\r\n    Intent intent = new Intent(Intent.ACTION_SENDTO, uri);\r\n    intent.putExtra(\"subject\", subject);\r\n    intent.putExtra(\"sms_body\", message);\r\n    if (attachment != null)\r\n        intent.putExtra(Intent.EXTRA_STREAM, attachment);\r\n    return intent;\r\n}\r\n```\r\n\r\n### email\r\n\r\n```java\r\npublic static Intent email(Context context, String[] to, String [] cc, String [] bcc, String subject, String body, Uri attachment) {\r\n    Intent intent = new Intent(Intent.ACTION_SENDTO);\r\n    intent.setData(Uri.parse(\"mailto:\"));\r\n    if (to != null)\r\n        intent.putExtra(Intent.EXTRA_EMAIL, to);\r\n    if (cc != null)\r\n    \tintent.putExtra(Intent.EXTRA_CC, cc);\r\n    if (bcc != null)\r\n    \tintent.putExtra(Intent.EXTRA_BCC, bcc);\r\n    if (body != null)\r\n        intent.putExtra(Intent.EXTRA_TEXT, body);\r\n    if (subject != null)\r\n        intent.putExtra(Intent.EXTRA_SUBJECT, subject);\r\n    if (attachment != null)\r\n        intent.putExtra(Intent.EXTRA_STREAM, attachment);\r\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n    return intent;\r\n}\r\n```\r\n\r\n### maps\r\n\r\n```java\r\npublic static Intent maps(Context context, double lat, double lng) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"geo:\" + lat + \",\" + lng));\r\n}\r\n```\r\n\r\n```java\r\npublic static Intent maps(Context context, double lat, double lng, int zoom) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"geo:\" + lat + \",\" + lng + \"?z=\" + zoom));\r\n}\r\n```\r\n\r\n```java\r\npublic static Intent maps(Context context, double lat, double lng, String label) throws UnsupportedEncodingException {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"geo:0,0?q=\" + lat + \",\" + lng + \"(\" + URLEncoder.encode(label, \"UTF-8\") + \")\"));\r\n}\r\n```\r\n\r\n```java\r\npublic static Intent maps(Context context, String query) throws UnsupportedEncodingException {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"geo:0,0?q=\" + URLEncoder.encode(query, \"UTF-8\")));\r\n}\r\n```\r\n\r\n### navigation\r\n\r\n```java\r\n/**\r\n * @param mode d: Driving, w: Walking, r: Public transit, b: Biking\r\n */\r\npublic static Intent navigation(Context context, String address, String mode) throws UnsupportedEncodingException {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"google.navigation:q=\" + URLEncoder.encode(address, \"UTF-8\") +( mode == null ? \"\" : (\"&mode=\" + mode))));\r\n}\r\n```\r\n\r\n```java\r\n/**\r\n * @param mode d: Driving, w: Walking, r: Public transit, b: Biking\r\n */\r\npublic static Intent navigate(Context context, double lat, double lng, String mode) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"google.navigation:q=\" + lat + \",\" + lng + (mode == null ? \"\" : (\"&mode=\" + mode))));\r\n}\r\n```\r\n\r\n### install\r\n\r\n```java\r\npublic static Intent install(Context context, Uri file) {\r\n    Intent intent = new Intent(Intent.ACTION_VIEW);\r\n    intent.setDataAndType(file, \"application/vnd.android.package-archive\");\r\n    return intent;\r\n}\r\n```\r\n\r\n### uninstall\r\n\r\n```java\r\npublic static Intent uninstall(Context context, String packageName) {\r\n    return new Intent(Intent.ACTION_DELETE, Uri.parse(\"package:\" + packageName));\r\n}\r\n```\r\n\r\n### playStore\r\n\r\n```java\r\npublic static Intent playStore(Context context, String packageName) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://details?id=\" + packageName));\r\n}\r\n```\r\n\r\n```java\r\npublic static Intent playStore(Context context, String publisherName) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://search?q=pub:\" + publisherName));\r\n}\r\n```\r\n\r\n```java\r\n/**\r\n * @param category apps, movies, music, newsstand, devices\r\n */\r\npublic static Intent playStore(Context context, String search, String category) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://search?q=\" + search + (category == null ? \"\" : (\"&c=\" + category))));\r\n}\r\n```\r\n\r\n```java\r\n/**\r\n * @param collection featured, editors_choice, topselling_paid, topselling_free, topselling_new_free, topselling_new_paid, topgrossing, movers_shakers, topselling_paid_game\r\n */\r\npublic static Intent playStore(Context context, String collection) {\r\n    return new Intent(Intent.ACTION_VIEW, Uri.parse(\"market://apps/collection/\" + collection));\r\n}\r\n```\r\n\r\n### select contact\r\n\r\n```java\r\npublic static Intent selectContact(Context context) {\r\n    Intent intent = new Intent(Intent.ACTION_PICK);\r\n    intent.setType(ContactsContract.Contacts.CONTENT_TYPE);\r\n    return intent;\r\n}\r\n```\r\n\r\n### take picture\r\n\r\n```java\r\npublic static Intent picture(Context context, File file) {\r\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\r\n    return intent;\r\n}\r\n```\r\n\r\n### take video\r\n\r\n```java\r\npublic static Intent video(Context context, File file) {\r\n    Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\r\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\r\n    return intent;\r\n}\r\n```\r\n\r\n### wifi settings\r\n\r\n```java\r\npublic static Intent wifi(Context context) {\r\n    return new Intent(Settings.ACTION_WIFI_SETTINGS);\r\n}\r\n```\r\n\r\nLogcat\r\n------\r\n\r\n### clear\r\n\r\n```java\r\npublic static void clear() {\r\n    try {\r\n        Runtime.getRuntime().exec(new String[] { \"logcat\", \"-c\" });\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"Failed to clear logcat \" + e.getMessage());\r\n    }\r\n}\r\n```\r\n\r\n### capture\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.READ_LOGS\" />\r\n```\r\n\r\n```java\r\n/**\r\n * @param args More intel on <a href=\"http://developer.android.com/tools/debugging/debugging-log.html\">developer.android.com</a>\r\n */\r\npublic static String logcat(String[] args) {\r\n    try {\r\n        final Process pr = Runtime.getRuntime().exec(args != null ? args : new String[] { \"logcat\", \"-d\" });\r\n        final BufferedReader br = new BufferedReader(new InputStreamReader(pr.getInputStream()));\r\n        final String separator = System.getProperty(\"line.separator\");\r\n        final StringBuilder log = new StringBuilder();\r\n        String line;\r\n        while ((line = br.readLine()) != null) {\r\n            log.append(line).append(separator);\r\n        }\r\n        return log.toString();\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"Failed to capture logcat \" + e.getMessage());\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nNetwork\r\n-------\r\n\r\n### is online\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n```\r\n\r\n```java\r\npublic static boolean isOnline(Context context) {\r\n    final NetworkInfo ni = ((ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();\r\n    return (ni != null && ni.isAvailable() && ni.isConnected());\r\n}\r\n```\r\n\r\n```java\r\n/**\r\n * {@link ConnectivityManager#TYPE_WIFI},\r\n * {@link ConnectivityManager#TYPE_ETHERNET},\r\n * {@link ConnectivityManager#TYPE_MOBILE}, ...\r\n */\r\npublic static boolean isOnline(Context context, int type) {\r\n    final NetworkInfo ni = ((ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE)).getNetworkInfo(type);\r\n    return ni != null && ni.isAvailable() && ni.isConnected();\r\n}\r\n```\r\n\r\n### enable wifi\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" />\r\n```\r\n\r\n```java\r\npublic static boolean enableWifi(Context context, boolean enable) {\r\n    return ((WifiManager) context.getSystemService(Context.WIFI_SERVICE)).setWifiEnabled(enable);\r\n}\r\n```\r\n","google":"UA-26219014-2","note":"Don't delete this file! It's used internally to help with page regeneration."}